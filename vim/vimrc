" General settings {{{1
if has('nvim')
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath = &runtimepath
    set completeopt=menu,menuone " Display insertion completion as a popup
    set fillchars=eob:\ ,fold:\  " Remove the tilde at lines at end of buffer
    set inccommand=nosplit " Show preview of what will happen on e.g. :s
    let g:python3_host_prog = "/usr/local/bin/python3"
else
    set backspace+=indent,eol,start " Allow backspace in insert mode
    set incsearch " Find the next search as we type search
    set encoding=utf-8 " Text encoding
    set ruler
    set laststatus=2
    syntax enable
    set wildmenu
    set completeopt=menuone,popup " Display insertion completion as a popup
    if exists("$COLORTERM")
        " Fancy colors
        " According to :h xterm-true-color
        " t_8f and t_8b are only set when $TERM is xterm*
        " In tmux, $TERM is screen by default.
        " Therefore, we have to set them explicitly here.
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        " Change cursor shape depending on mode
        let &t_SI = "\e[5 q"
        let &t_EI = "\e[2 q"
    endif
endif

set langmenu=none " Disable localized menus
filetype plugin indent on
set expandtab " Expands tab into spaces
set shiftwidth=4 " Width when using <, >
set shiftround " When using <, >, round to nearest shiftwidth
set softtabstop=4 " Actual length when using tabs
if has('clipboard')
    set clipboard=unnamed " Yank/paste automatically to/from system clipboard
endif
set foldlevel=99 " Start with all folds open
set ttimeoutlen=0 " Delay after pressing ESC and another character
set path=.,, " Search relative to current dir and in current dir
set path+=/Users/arvidbjurklint/Dropbox/Chalmers/
set path+=/Users/arvidbjurklint/Dropbox/dotfiles/
set wildignore=*.aux,*.log,*.fdb_latexmk,*.fls,*.out,*.synctex.gz,
set wildignorecase
set nohlsearch
set breakindent " Indents word-wrapped lines as much as the parent line
set textwidth=80 " Sets when the line should break
set linebreak " Ensures word-wrap does not split words 
set splitbelow splitright " Open new windows below the current and to the right
set shortmess+=I " Disables intro on startup
set number " Show line number on the left
set relativenumber " Show numbers relative to current line number
set ignorecase " Ignore cases in search, substitute
set smartcase " Unless typing a capital letter
set nojoinspaces " Do not put two spaces after [.!?] when formatting

" Plugins {{{1

" Ensure vim-plug is installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/plugged')
    Plug 'lifepillar/vim-gruvbox8'
    Plug 'tpope/vim-commentary'
    Plug 'neomake/neomake'
    Plug 'slarwise/vim-tmux-cycle'
    Plug 'slarwise/vim-tmux-send'
    Plug 'slarwise/vim-zen'
    Plug 'junegunn/limelight.vim'
    Plug 'justinmk/vim-sneak'
    Plug 'tpope/vim-repeat'
    Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
call plug#end()

"""""""""""""""""""""""""""""""""""""" tex """""""""""""""""""""""""""""""""""""
let g:tex_no_error=1
let g:tex_flavor='latex'
let g:tex_noindent_env = 'document\|verbatim\|lstlisting\|center'
let g:tex_fold_enabled = 1

""""""""""""""""""""""""""""""""""" markdown """""""""""""""""""""""""""""""""""
let g:markdown_fenced_languages = ['python']

""""""""""""""""""""""""""""""""""" gruvbox8 """"""""""""""""""""""""""""""""""" 
let g:gruvbox_transp_bg = 0
let g:gruvbox_italics = 1
let g:gruvbox_italicize_strings = 1
let g:gruvbox_filetype_hi_groups = 1
let g:gruvbox_plugin_hi_groups = 1

"""""""""""""""""""""""""""""""""""" neomake """""""""""""""""""""""""""""""""""
augroup compile_on_write
    autocmd!
    autocmd BufWritePost *.mkiv,*.md
                \ :if exists("b:compile_on_write") && b:compile_on_write | 
                \ Neomake! |
                \ endif
augroup END

""""""""""""""""""""""""""""""""""""" sneak """"""""""""""""""""""""""""""""""""
highlight link Sneak None
augroup sneak_hl
    autocmd!
    autocmd ColorScheme * highlight link Sneak None
augroup END
""""""""""""""""""""""""""""""""""" hexokinase """""""""""""""""""""""""""""""""
let g:Hexokinase_highlighters = ['backgroundfull']

" Colors {{{1
set background=light
if exists("$COLORTERM")
    set termguicolors
    colorscheme gruvbox8_soft
else
    colorscheme zellner
endif

" Mappings {{{1
nnoremap Y y$

" Make having a Swedish keyboard layout easier
let mapleader= "ö"

call execute(['nnoremap Ö :', 'vnoremap Ö :'])
call execute(['nnoremap qö q:', 'vnoremap qö q:'])
noremap , ;
noremap ; ,
noremap - /
noremap _ ?
nnoremap q- q/
noremap gh ^
noremap gl $

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qall<CR>

nnoremap <leader>sm :source ~/.vim/vimrc <CR>
nnoremap <leader>ss :source % <CR>

nnoremap <leader>em :edit ~/.vim/vimrc <CR>
nnoremap <leader>ef :edit ~/Dropbox/dotfiles/vim/after/ftplugin/
nnoremap <leader>et :split ~/Dropbox/Chalmers/todo.md<CR>

nnoremap <leader>f :find **/

set wildcharm=<Tab>
cnoremap <expr> <C-l> wildmenumode() ? "\<Down>\<Tab>" : "\<C-l>"
cnoremap <expr> <C-h> wildmenumode() ? "\<Up>\<Tab>" : "\<C-h>"

" Swedish version of vim-unimpaired, åä instead of [], ää toggles
nnoremap åa :previous <CR>
nnoremap äa :next <CR>
nnoremap åA :first <CR>
nnoremap äA :last <CR>
nnoremap ääa :args <CR>

nnoremap åb :bprevious <CR>
nnoremap äb :bnext <CR>
nnoremap åB :bfirst <CR>
nnoremap äB :blast <CR>

nnoremap åc :cprevious <CR>
nnoremap äc :cnext <CR>
nnoremap åC :cfirst <CR>
nnoremap äC :clast <CR>
nnoremap <silent> ääc
            \ :if getqflist({'winid' : 0}).winid <BAR> cclose <BAR> else <BAR>
            \ execute "copen <BAR> wincmd p" <BAR> endif <CR>

nnoremap ål :lprevious <CR>
nnoremap äl :lnext <CR>
nnoremap åL :lfirst <CR>
nnoremap äL :llast <CR>

nnoremap ääb :let &bg = (&bg==#'dark' ? 'light' : 'dark') <CR>
nnoremap ääh :set hlsearch! <CR>
nnoremap ää- :set cursorline! <CR>

"""""""""""""""""""""""""""""""" Plugin mappings """""""""""""""""""""""""""""""
nnoremap åf :call go_to_file_in_current_dir#go_to('previous') <CR>
nnoremap äf :call go_to_file_in_current_dir#go_to('next') <CR>
nnoremap åF :call go_to_file_in_current_dir#go_to('first') <CR>
nnoremap äF :call go_to_file_in_current_dir#go_to('last') <CR>

if exists("$TMUX")
    nnoremap <silent> <c-j> :VimTmuxCycleNext <CR>
    nnoremap <silent> <c-k> :VimTmuxCyclePrevious <CR>
else
    nnoremap <silent> <c-h> <c-w>h
    nnoremap <silent> <c-j> <c-w>j
    nnoremap <silent> <c-k> <c-w>k
    nnoremap <silent> <c-l> <c-w>l
endif

nnoremap <leader>pm :SendMakeCmd <CR>
nnoremap <leader>pp :SendLine <CR>
nnoremap <silent><leader>p :set operatorfunc=vim_tmux_send#send_selection<CR>g@
nnoremap <leader>pe :SendKeys "ENTER" <CR>
nnoremap <leader>pl :SendKeys "C-l" <CR>
nnoremap <leader>pu :SendKeys "C-u" <CR>
nnoremap <leader>pc :SendKeys "C-c" <CR>
nnoremap <leader>pd :SendKeys "C-d" <CR>

nnoremap <silent>ääl :Limelight!! 0.8 <CR>
nnoremap <silent>ääz :Zen <CR>

nnoremap <leader>m :Neomake <CR>
nnoremap <leader>M :Neomake! <CR>

map § <Plug>Sneak_s
map ° <Plug>Sneak_S
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T
map , <Plug>Sneak_;
map ; <Plug>Sneak_,

" vim:set foldmethod=marker:
