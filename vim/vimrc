" General settings{{{
if has('nvim')
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath = &runtimepath
    set completeopt=menu,menuone " Display insertion completion as a popup
    set fillchars=eob:\     " Remove the tilde at lines at end of buffer
    set inccommand=nosplit " Show preview of what will happen on e.g. :s
    let g:python3_host_prog = "/usr/local/bin/python3"
else
    set backspace+=indent,eol,start " Allow backspace in insert mode
    set incsearch " Find the next search as we type search
    set encoding=utf-8 " Text encoding
    set ruler
    set laststatus=2
    syntax enable
    set wildmenu
    set completeopt=menuone,popup " Display insertion completion as a popup
    if exists("$COLORTERM")
        " Fancy colors
        " According to :h xterm-true-color
        " t_8f and t_8b are only set when $TERM is xterm*
        " In tmux, $TERM is screen by default.
        " Therefore, we have to set them explicitly here.
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        " Change cursor shape depending on mode
        let &t_SI = "\e[5 q"
        let &t_EI = "\e[2 q"
    endif
endif

set langmenu=none " Disable localized menus
filetype plugin indent on
set expandtab " Expands tab into spaces
set shiftwidth=4 " Width when using <, >
set shiftround " When using <, >, round to nearest shiftwidth
set softtabstop=4 " Actual length when using tabs
set ignorecase " Ignore case when searching...
set smartcase " ...unless we type a capital
if has('clipboard')
    set clipboard=unnamed " Yank/paste automatically to/from system clipboard
endif
set foldlevel=99 " Start with all folds open
set ttimeoutlen=0 " Delay after pressing ESC and another character
set path=.,, " Search relative to current dir and in current dir
set path+=/Users/arvidbjurklint/Dropbox/Chalmers/
set path+=/Users/arvidbjurklint/Dropbox/dotfiles/
set wildignore=*.aux,*.log,*.fdb_latexmk,*.fls,*.out,*.synctex.gz,
set wildignorecase
set nohlsearch
set breakindent " Indents word-wrapped lines as much as the parent line
set textwidth=80 " Sets when the line should break
set linebreak " Ensures word-wrap does not split words 
set splitbelow splitright " Open new windows below the current and to the right
set shortmess=I " Disables intro on startup
set number " Show line number on the left
set relativenumber " Show numbers relative to current line number
"}}}

" Plugins {{{

" Ensure vim-plug is installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/plugged')
    Plug 'morhetz/gruvbox'
    Plug 'tpope/vim-commentary'
    Plug 'neomake/neomake'
    Plug 'slarwise/vim-tmux-cycle'
    Plug 'slarwise/vim-tmux-send'
    Plug 'slarwise/vim-zen'
    Plug 'junegunn/limelight.vim'
call plug#end()

" gruvbox
let g:gruvbox_contrast_light='soft'
let g:gruvbox_contrast_dark='soft'
let g:gruvbox_italic=1
let g:gruvbox_italicize_comments=1
let g:gruvbox_invert_selection=0

" tex
let g:tex_no_error=1
let g:tex_flavor='latex'
let g:tex_noindent_env = 'document\|verbatim\|lstlisting\|center'
let g:tex_fold_enabled = 1

" neomake
augroup compile_on_write
    autocmd!
    autocmd BufWritePost *.mkiv,*.md
                \ :if exists("b:compile_on_write") && b:compile_on_write | 
                \ Neomake! |
                \ endif
augroup END
"}}}

" Colors {{{
set background=light
if exists("$COLORTERM")
    set termguicolors
    colorscheme gruvbox
else
    colorscheme zellner
endif
"}}}

" Mappings{{{
nnoremap Y y$

" Make having a Swedish keyboard layout easier
let mapleader="ö"
noremap Ö :
noremap qö q:
noremap , ;
noremap ; ,
noremap - /
noremap _ ?
noremap q- q/
noremap ¨ ^

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qall<CR>

nnoremap <leader>sm :source ~/.vim/vimrc <CR>
nnoremap <leader>ss :source % <CR>

nnoremap <leader>em :edit ~/.vim/vimrc <CR>
nnoremap <leader>ef :edit ~/Dropbox/dotfiles/vim/after/ftplugin/
nnoremap <leader>et :split ~/Dropbox/Chalmers/todo.md<CR>

nnoremap <leader>f :find **/

set wildcharm=<Tab>
cnoremap <expr> <C-j> wildmenumode() ? "\<Down>\<Tab>" : "\<C-j>"
cnoremap <expr> <C-k> wildmenumode() ? "\<Up>\<Tab>" : "\<C-k>"

" Swedish version of vim-unimpaired, åä instead of [], Ä toggles
nnoremap åa :previous <CR>
nnoremap äa :next <CR>
nnoremap åA :first <CR>
nnoremap äA :last <CR>
nnoremap Äa :args <CR>

nnoremap åc :cprevious <CR>
nnoremap äc :cnext <CR>
nnoremap åC :cfirst <CR>
nnoremap äC :clast <CR>
nnoremap <silent> Äc
            \ :if getqflist({'winid' : 0}).winid <BAR> cclose <BAR> else <BAR>
            \ execute "copen <BAR> wincmd p" <BAR> endif <CR>

nnoremap ål :lprevious <CR>
nnoremap äl :lnext <CR>
nnoremap åL :lfirst <CR>
nnoremap äL :llast <CR>

nnoremap Äb :let &bg = (&bg==#'dark' ? 'light' : 'dark') <CR>
nnoremap Äh :set hlsearch! <CR>
nnoremap Ä- :set cursorline! <CR>

" Plugin mappings
nnoremap åf :call go_to_file_in_current_dir#go_to('previous') <CR>
nnoremap äf :call go_to_file_in_current_dir#go_to('next') <CR>
nnoremap åF :call go_to_file_in_current_dir#go_to('first') <CR>
nnoremap äF :call go_to_file_in_current_dir#go_to('last') <CR>

nnoremap <silent> <c-j> :VimTmuxCycleNext <CR>
nnoremap <silent> <c-k> :VimTmuxCyclePrevious <CR>

nnoremap <leader>pm :SendMakeCmd <CR>
nnoremap <leader>pp :SendLine <CR>
nnoremap <silent><leader>p :set operatorfunc=vim_tmux_send#send_selection<CR>g@
nnoremap <leader>pe :SendKeys "ENTER" <CR>
nnoremap <leader>pl :SendKeys "C-l" <CR>
nnoremap <leader>pu :SendKeys "C-u" <CR>
nnoremap <leader>pc :SendKeys "C-c" <CR>
nnoremap <leader>pd :SendKeys "C-d" <CR>

nnoremap <silent>Äl :Limelight!! 0.8 <CR>
nnoremap <silent>Äz :Zen <CR>

nnoremap <leader>m :Neomake <CR>
nnoremap <leader>M :Neomake! <CR>
"}}}

" vim:set foldmethod=marker foldlevel=0:
