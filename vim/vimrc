" General settings {{{1
if has('nvim')
    " Use vim's directory architecture
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath = &runtimepath
    set completeopt=menu,menuone " Display insertion completion as a popup
    set fillchars=eob:\ ,fold:\  " Remove the tilde at lines at end of buffer
    set inccommand=nosplit " Show preview of what will happen on e.g. :s
    let g:python3_host_prog = "/usr/local/bin/python3"
else
    set backspace+=indent,eol,start " Allow backspace in insert mode
    set incsearch " Find the next search as we type search
    set encoding=utf-8 " Text encoding
    set ruler
    set laststatus=2
    syntax enable
    set wildmenu
    set completeopt=menuone,popup " Display insertion completion as a popup
    if exists("$COLORTERM")
        " Fancy colors
        " According to :h xterm-true-color
        " t_8f and t_8b are only set when $TERM is xterm*
        " In tmux, $TERM is screen by default.
        " Therefore, we have to set them explicitly here.
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        " Change cursor shape depending on mode
        let &t_SI = "\e[5 q"
        let &t_EI = "\e[2 q"
    endif
endif

filetype plugin indent on
set expandtab " Expands tab into spaces
set shiftwidth=4 " Width when using <, >
set shiftround " When using <, >, round to nearest shiftwidth
set softtabstop=4 " Actual length when using tabs
if has('clipboard')
    set clipboard=unnamed " Yank/paste automatically to/from system clipboard
endif
set foldlevel=99 " Start with all folds open
set ttimeoutlen=0 " Delay after pressing ESC and another character
set textwidth=80 " Sets when the line should break
set linebreak " Ensures word-wrap does not split words
set breakindent " Indents word-wrapped lines as much as the parent line
set shortmess+=I " Disables intro on startup
set nojoinspaces " Do not put two spaces after [.!?] when formatting

" Plugins {{{1

" Ensure vim-plug is installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/plugged')
    Plug 'lifepillar/vim-gruvbox8'
    Plug 'tpope/vim-commentary'
    Plug 'neomake/neomake'
    Plug 'justinmk/vim-sneak'
    Plug 'tpope/vim-repeat'
    Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
    Plug 'tpope/vim-surround'
call plug#end()

let g:tex_no_error=1
let g:tex_flavor='latex'
let g:tex_noindent_env = 'document\|verbatim\|lstlisting\|center'
let g:tex_fold_enabled = 1

let g:markdown_fenced_languages = ['python']

let g:gruvbox_filetype_hi_groups = 1
let g:gruvbox_plugin_hi_groups = 1

let g:neomake_virtualtext_current_error=0
let g:neomake_place_signs=0

" highlight link Sneak None
" augroup sneak_hl
"     autocmd!
"     autocmd ColorScheme * highlight link Sneak None
" augroup END

let g:Hexokinase_highlighters = ['backgroundfull']

" Colors {{{1
set background=light
if exists("$COLORTERM")
    set termguicolors
    colorscheme gruvbox8_soft
else
    colorscheme zellner
endif

" Statusline
if exists("$COLORTERM")
    function SetStatusLineCornersHLGroup()
        if synIDattr(synIDtrans(hlID('StatusLine')), 'reverse')
            let s:corner_fg = synIDattr(synIDtrans(hlID('StatusLine')), 'fg')
        else
            let s:corner_fg = synIDattr(synIDtrans(hlID('StatusLine')), 'bg')
        endif
        let s:corner_bg = synIDattr(synIDtrans(hlID('Normal')), 'bg')
        execute 'highlight User1 guifg='.s:corner_fg.' guibg='.s:corner_bg
    endfunction
    call SetStatusLineCornersHLGroup()
    set statusline=%1*ÓÇ∂%*\ %{&modified?'‚óè':'\ '}\ \ %f%=%l/%L,%c\ %1*ÓÇ¥%*
    augroup statusline_corner_hl
        autocmd!
        autocmd ColorScheme * call SetStatusLineCornersHLGroup()
    augroup END
else
    set statusline=\ %m\ \ %f%=%l/%L,%c\ 
endif

" Display {{{1
augroup auto_equal_windows
    autocmd!
    autocmd VimResized * wincmd =
augroup END

" Mappings {{{1
nnoremap Y y$

nnoremap Zu :update<CR>
nnoremap Zm :edit ~/.vim/vimrc <CR>
nnoremap Zf :edit ~/Dropbox/dotfiles/vim/after/ftplugin/
nnoremap Zt :edit ~/Dropbox/Chalmers/todo.md<CR>

nnoremap m :update <bar> Neomake!<CR>
nnoremap m :update <bar> Neomake<CR>
" Toggle quickfix window
nnoremap <silent> m
            \ :if getqflist({'winid' : 0}).winid <BAR> cclose <BAR> else <BAR>
            \ execute "copen <BAR> wincmd p" <BAR> endif <CR>

nnoremap <C-p> :find **/

" Use Ctrl-h and Ctrl-l to go up/down directories
set wildcharm=<Tab>
cnoremap <expr> <C-l> wildmenumode() ? "\<Down>\<Tab>" : "\<C-l>"
cnoremap <expr> <C-h> wildmenumode() ? "\<Up>\<Tab>" : "\<C-h>"

" vim:set foldmethod=marker:
