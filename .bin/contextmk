#!/usr/bin/env python

# Compile context file whenever any dependent file is modified.

# Layout:
#   - Stop compilation with Ctrl-C.

#   1 Compile and set last_compile_time
#   2 Get dep files, check if they exist.
#   3 Wait 1 sec.
#   4 Check if exists changed of if mod_time > last_compile_time
#       - If True, go to 1.
#       - False, go to 2.

import argparse
import subprocess
import time
import sys
import os
import re
import numpy as np

def get_file_deps(logfile):
    file_deps = []
    with open(logfile) as f:
        for line in f:
            line_split_readfile = line.rsplit('found local: ')
            if len(line_split_readfile) > 1:
                file_dep = line_split_readfile[1].rstrip()
                file_deps.append(file_dep)
            if 'usedmethod=direct' in line:
                file_dep = line.split('fullname=')[1]
                file_dep = file_dep.split(' usedmethod=direct')[0]
                file_deps.append(file_dep)
    return list(set(file_deps))

def run_context(jobname):
    subprocess.run(['context', '--trackers=resolvers.readfile', jobname])

def print_idle_message(dep_fnames):
    print('Currently tracking: ')
    print(*dep_fnames, sep=', ')
    print('Waiting for updated files, press <CTRL-C> to quit')

def get_file_deps_status(file_deps):
    file_deps_status = []
    for fname in file_deps:
        exists = os.path.exists(fname)
        if exists:
            modtime = os.path.getmtime(fname)
        else:
            modtime = None
        file_deps_status.append({'fname': fname,
            'exists': exists,
            'modtime': modtime})
    return file_deps_status

def main_loop(jobname):
    run_context(jobname)
    last_compile_time = time.time()
    logfile = jobname.split('.')[0] + '.log'
    file_deps = get_file_deps(logfile)
    file_deps_status = get_file_deps_status(file_deps)
    print_idle_message(file_deps)
    try:
        while True:
            pdf_outdated = False
            time.sleep(1)
            for status in file_deps_status:
                if status['exists']:
                    new_exists = os.path.exists(status['fname'])
                    if new_exists:
                        new_mod_time = os.path.getmtime(status['fname'])
                        if new_mod_time > last_compile_time:
                            pdf_outdated = True
                    else:
                        pdf_outdated = True
                else:
                    if os.path.exists(status['fname']):
                        pdf_outdated = True
            if pdf_outdated:
                run_context(jobname)
                last_compile_time = time.time()
                file_deps = get_file_deps(logfile)
                file_deps_status = get_file_deps_status(file_deps)
                print_idle_message(file_deps)
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('jobname', help='context file to be run')
    args = parser.parse_args()
    main_loop(args.jobname)
