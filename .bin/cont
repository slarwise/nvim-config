#!/usr/bin/env python

# Compile context file whenever any dependent file is modified.

# Layout:
#   - Stop compilation with Ctrl-C.

#   1 Search the given context file for external files.
#   2 Get the last modified time for all these files.
#   3 Check, maybe once every 0.5 seconds, if any of the files are updated,
#       if so, run context <file>. If so, go to 1, else repeat 3.

import argparse
import subprocess
import time
import sys
import os
import re
import numpy as np

def find_dependent_files(fname):
    dep_files = []
    file_extensions = ('tex',
            'csv',
            'py', 'c',
            'pdf', 'png', 'jpg', 'eps'
            )
    pattern = ''
    for ext in file_extensions:
        pattern += '\W[\w/]+\.' + ext + '\W' + '|'
    pattern = pattern[:-1]
    with open(fname) as f:
        for line in f.readlines():
            matches = re.findall(pattern, line)
            if matches:
                for match in matches:
                    match = match.replace('[', '')
                    match = match.replace(']', '')
                    match = match.replace('}', '')
                    match = match.replace('{', '')
                    dep_files.append(match)
    dep_files = [fname] + list(set(dep_files))
    return dep_files

def get_last_modified_times(fnames):
    mod_times = []
    for fname in fnames:
        mod_times.append(os.stat(fname).st_mtime)
    return np.array(mod_times)

def print_idle_message(dep_fnames):
    print('Currently tracking: ')
    print(*dep_fnames, sep=', ')
    print('Waiting for updated files, press <CTRL-C> to quit')

def main_loop(fname):
    dep_fnames = find_dependent_files(fname)
    old_mod_times = get_last_modified_times(dep_fnames)
    subprocess.run(['context', '--purge', fname])
    print_idle_message(dep_fnames)
    try:
        while True:
            time.sleep(1)
            new_mod_times = get_last_modified_times(dep_fnames)
            diff_times = new_mod_times - old_mod_times
            if np.any(diff_times > 0):
                dep_fnames = find_dependent_files(fname)
                old_mod_times = get_last_modified_times(dep_fnames)
                subprocess.run(['context', '--purge', fname])
                print_idle_message(dep_fnames)
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('fname', help='context file to be run')
    parser.add_argument('--nonstopmode', help='do not stop on errors',
            action="store_true")
    args = parser.parse_args()
    main_loop(args.fname)
