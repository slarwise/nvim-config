" General settings{{{
" Use Vim settings rather than Vi settings
set nocompatible

" Allow backspace in insert mode
set backspace+=indent,eol,start

" Disable localized menus
set langmenu=none

" Use specific filetype settings
filetype on
filetype indent on
filetype plugin on

" Indentation and tabs
set smartindent " Takes the indent of above line, useful for regular txt-files
set expandtab " Expands tab into spaces
set shiftwidth=4 " Width when using <, >
set shiftround " When using <, >, round to nearest shiftwidth
set softtabstop=4 " Actual length when using tabs
set tabstop=8 " How tabs are read, best to always keep at 8 (default)
set smarttab " Inserts blanks according to shiftwidth when pressing <TAB>

" Searching
set incsearch " Find the next search as we type search
set ignorecase " Ignore case when searching...
set smartcase " ...unless we type a capital

" Copy/paste directly from system clipboard without having to specify the "*
" register
set clipboard=unnamed

" Folding
set foldlevel=99 " Start with all folds open, least correct but fastest way (?)
"}}}
" Display{{{
" Text encoding
set encoding=utf-8

" GUI Font
set guifont=Monaco:h12

" Syntax highlighting
syntax enable

" Colors
if $TERM_PROGRAM ==# "iTerm.app"
    " According to :h xterm-true-color
    " t_8f and t_8b are only set when $TERM is xterm*
    " In tmux, $TERM is screen by default.
    " Therefore, we have to set them explicitly here.
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    set background=light
    " Make comments italic
    highlight Comment cterm=italic
    " Change cursor shape depending on mode
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
else
    set background=light
    colorscheme zellner
endif

" Line numbers
set ruler " Show line and column number (only applies to CTRL-g if statusline)
set number " Show line number on the left
set relativenumber " Show numbers relative to current line number

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=2

" Status line
" Can I add word count here or show word count on write?
set laststatus=2 " Always show statusline
set statusline=
set statusline+=%f	    " filename, relative to current working directory
set statusline+=\[%{strlen(&ft)?&ft:'none'}]    " file type
set statusline+=%h%m%r%w    " status flags
set statusline+=%=  " right align remainder
set statusline+=%-14(%l/%L,%c%)  " line/total number of lines

" Show mode (--INSERT--, --VISUAL--, ...)
set showmode

" Display incomplete commands
set showcmd

" Completion
set wildmenu
set wildignore=*.aux,*.log,*.fdb_latexmk,*.fls,*.out,*.synctex.gz
set completeopt=menuone,popup
"
" Word wrapping
set breakindent " Indents word-wrapped lines as much as the parent line
set linebreak " Ensures word-wrap does not split words 
set textwidth=80 " Used for example in md files, when the line should be split

" Splits
set splitbelow
set splitright
"}}}
" Mappings{{{
let mapleader=" "
let maplocalleader="-"

" Basic commands
nnoremap <LEADER>w :w<CR>
nnoremap <LEADER>q :q<CR>

" Navigating tmux panes and vim windows with the same mappings.
" <c-j> to go to the next window/pane and <c-k> to previous.
if exists("$TMUX")
    function GoToNextWindow()
        if winnr() < winnr('$') || (str2nr(system("tmux list-panes|wc -l")) == 1)
            execute "normal! \<c-w>w"
        else
            execute "terminal ++hidden tmux select-pane -t+"
            if trim(system("tmux display -p '#{pane_current_command}'")) ==# "vim"
                execute "terminal ++hidden tmux send-keys C-w t"
            endif
        endif
    endfunction

    function GoToPreviousWindow()
        if winnr() > 1 || (str2nr(system("tmux list-panes|wc -l")) == 1)
            execute "normal! \<c-w>W"
        else
            execute "terminal ++hidden tmux select-pane -t-"
            if trim(system("tmux display -p '#{pane_current_command}'")) ==# "vim"
                execute "terminal ++hidden tmux send-keys C-w b"
            endif
        endif
    endfunction

    nnoremap <silent> <c-j> :call GoToNextWindow()<cr>
    nnoremap <silent> <c-k> :call GoToPreviousWindow()<cr>
else
    nnoremap <c-j> <c-w>w
    nnoremap <c-k> <c-w>W
endif

" Remove delay after pressing ESC and another character, i.e. key code delays
set ttimeoutlen=0

" Remap รถ to colon for faster ex commands
noremap รถ :

" Make
nnoremap <LEADER>mm :make<CR>
nnoremap <LEADER>mM :make!<CR>
nnoremap <LEADER>mc :make clean<CR>
nnoremap <LEADER>mC :make! clean<CR>

" $MYVIMRC
nnoremap <LEADER>sm :source $MYVIMRC<CR>
nnoremap <LEADER>em :edit $MYVIMRC<CR>

" Open explorer to my vim-folders
nnoremap <LEADER>ef :Explore ~/Dropbox/dotfiles/.vim/after/ftplugin/<CR>

" Todo-file
nnoremap <LEADER>t :sp ~/Dropbox/Chalmers/todo.md<CR>

" Finding files
" Searches recursively from the current directory, matching 
nnoremap <LEADER>f :find **/*
set path=.,, " Finds files in current directory and relative to current directory
"}}}
" Filetype specifics (That cannot be put in the after-directory){{{
" Latex
let g:tex_no_error=1
let g:tex_flavor='latex'
let g:tex_noindent_env = 'document\|verbatim\|lstlisting\|center'
let g:tex_fold_enabled = 1
" =============================================================================
"}}}
" vim: set foldmethod=marker:
